var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LDrawParser","category":"page"},{"location":"#LDrawParser","page":"Home","title":"LDrawParser","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LDrawParser]","category":"page"},{"location":"#LDrawParser.BuildingStep","page":"Home","title":"LDrawParser.BuildingStep","text":"BuildingStep\n\nRepresents a sequence of part placements that make up a building step in a LDraw file.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.COMMAND_CODE","page":"Home","title":"LDrawParser.COMMAND_CODE","text":"COMMAND_CODE\n\nThe line type of a line is the first number on the line. The line types are:\n\nMETA          # 0 !<META command> <additional parameters>\nSUBFILEREF  # 1 <colour> x y z a b c d e f g h i <file>\nLINE          # 2 <colour> x1 y1 z1 x2 y2 z2\nTRIANGLE      # 3 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3\nQUADRILATERAL # 4 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4\nOPTIONAL_LINE # 5 <colour> x1 y1 z1 x2 y2 z2 x3 y3 z3 x4 y4 z4\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.DATModel","page":"Home","title":"LDrawParser.DATModel","text":"DATModel\n\nEncodes the raw geometry of a LDraw part stored in a .dat file. It is possible to avoid populating the geometry fields, which is useful for large models or models that use parts from the LDraw library.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.FILE_TYPE","page":"Home","title":"LDrawParser.FILE_TYPE","text":"FILE_TYPE\n\nAll LDraw files carry the LDR (default), DAT or MPD extension.\n\nOfficial Parts Part | Subpart | Primitive | 8Primitive | 48Primitive | Shortcut Unofficial Parts UnofficialPart| UnofficialSubpart | UnofficialPrimitive | Unofficial8Primitive | Unofficial48Primitive | UnofficialShortcut\n\nThe file type is usually prefaced in one of the following ways     0 !LDRAWORG <type> (qualifier(s)) (update-tag)     0 LDRAWORG <type> update-tag     0 Official LCAD <type> update-tag     0 Unofficial <type>     0 Un-official <type>\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.META_COMMAND","page":"Home","title":"LDrawParser.META_COMMAND","text":"META_COMMAND\n\n0 !<META command> <additional parameters>\n\n! is used to positively identify this as a META command. (Note: A few   official meta commands do not start with a ! in order to preserve backwards compatibility, however, all new official META commands must start with a ! and it is strongly recommended that new unofficial meta-commands also start with a !)\n<META command> is any string in all caps\n<additional parameters> is any string. Note that if a META command does not   require any additional parameter, none should be given.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.MPDModel","page":"Home","title":"LDrawParser.MPDModel","text":"MPDModel\n\nThe MPD model stores the information contained in a .mpd or .ldr file. This includes a submodel tree (stored implicitly in a dictionary that maps model_name to SubModelPlan) and a part list. The first model in MPDModel.models is the main model. All the following are submodels of that model and/or each other.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.NgonElement","page":"Home","title":"LDrawParser.NgonElement","text":"NgonElement\n\nRepresents geometry from an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.OptionalLineElement","page":"Home","title":"LDrawParser.OptionalLineElement","text":"OptionalLineElement\n\nRepresents optional line geometry from an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.SubFileRef","page":"Home","title":"LDrawParser.SubFileRef","text":"SubFileRef\n\nRepresents a sub-file reference from an LDraw file. Encodes the placement of a part or submodel.\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.SubModelPlan","page":"Home","title":"LDrawParser.SubModelPlan","text":"SubModelPlan\n\nRepresents the sequence of building steps that make up a sub model in an LDraw file\n\n\n\n\n\n","category":"type"},{"location":"#LDrawParser.change_coordinate_system!","page":"Home","title":"LDrawParser.change_coordinate_system!","text":"change_coordinate_system!(model::MPDModel,T)\n\nTransform the coordinate system of the entire model\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.ldraw_base_frame-Tuple{}","page":"Home","title":"LDrawParser.ldraw_base_frame","text":"ldraw_base_frame()\n\nReturns a rotation matrix that defines the base LDraw coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.parse_ldraw_file!","page":"Home","title":"LDrawParser.parse_ldraw_file!","text":"parse_ldraw_file!\n\nArgs:     - model     - filename or IO\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.populate_part_geometry!","page":"Home","title":"LDrawParser.populate_part_geometry!","text":"populate_part_geometry!(model,frontier=Set(collect(part_keys(model))))\n\nLoad all geometry into model.parts. Loading is recursive, so that geometry will be loaded through arbitrary levels of nested subparts until finally being stored in each atomic part that is referenced by the main model(s).\n\n\n\n\n\n","category":"function"},{"location":"#LDrawParser.read_line!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_line!","text":"read_line!\n\nFor reading lines of type LINE\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_meta_line!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_meta_line!","text":"read_meta_line(model,state,line)\n\nModifies the model and parser_state based on a META command. For example, the FILE meta command indicates the beginning of a new file, so this creates a new active model into which subsequent building steps will be placed. The STEP meta command indicates the end of the current step, which prompts the parser to close the current build step and begin a new one.\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_optional_line!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_optional_line!","text":"read_optional_line!\n\nFor reading lines of type OPTIONAL_LINE\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_quadrilateral!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_quadrilateral!","text":"read_quadrilateral!\n\nFor reading lines of type QUADRILATERAL\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_sub_file_ref!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_sub_file_ref!","text":"read_sub_file_ref\n\nReceives a SUBFILEREF line (with the leading SUBFILEREF id stripped)\n\n\n\n\n\n","category":"method"},{"location":"#LDrawParser.read_triangle!-Tuple{Any,Any,Any}","page":"Home","title":"LDrawParser.read_triangle!","text":"read_triangle!\n\nFor reading lines of type TRIANGLE\n\n\n\n\n\n","category":"method"}]
}
